// DATA TYPES
// ------------------------------------------------------------------------------------------------------
// In the previous section, we mentioned a little bit about data types.
// Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two:

// 1. Primitive data types
// 2. Non-primitive data types(Object References)

// PRIMITIVE DATA TYPES
// ------------------------------------------------------------------------------------------------------
// Primitive data types in JavaScript include:

// 1. Numbers - Integers, floats
// 2. Strings - Any data under single quote, double quote or backtick quote
// 3. Booleans - true or false value
// 4. Null - empty value or no value
// 5. Undefined - a declared variable without a value
// 6. Symbol - A unique value that can be generated by Symbol constructor

// Non-primitive data types in JavaScript includes:
// 1. Objects
// 2. Arrays

// Now, let us see what exactly primitive and non-primitive data types mean.
// Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it.

// Example:
let word = 'JavaScript';

// If we try to modify the string stored in variable word, JavaScript should raise an error.
// Any data type under a single quote, double quote, or backtick quote is a string data type.
word[0] = 'Y';

// This expression does not change the string stored in the variable word.
// So, we can say that strings are not modifiable or in other words immutable.
// Primitive data types are compared by its values. Let us compare different data values. See the example below:

let numOne = 3;
let numTwo = 3;
console.log(numOne == numTwo); // true

let javaScript = 'JavaScript';
let python = 'Python';
console.log(javaScript == python); // false

let isLightOn = true;
let isLightOff = false;
console.log(isLightOn == isLightOff); // false

// NON-PRIMITIVE DATA TYPES
// ------------------------------------------------------------------------------------------------------
// Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created.
// Let us see by creating an array. An array is a list of data values in a square bracket.
// Arrays can contain the same or different data types. Array values are referenced by their index.
// In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero,
// the second element at index one, and the third element at index two, etc.

// let nums = [1, 2, 3];
// nums[0] = 10;
// console.log(nums); // [10, 2, 3]

// As you can see, an array, which is a non-primitive data type is mutable.
// Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values,
// they are not strictly equal.

let nums = [1, 2, 3];
let numbers = [1, 2, 3];
console.log(nums == numbers); // false

let userOne = {
  firstName: 'Ali',
  lastName: 'Yolalan',
  role: 'Software Development',
  country: 'Turkey',
};
let userTwo = {
  firstName: 'Ali',
  lastName: 'Yolalan',
  role: 'Software Development',
  country: 'Turkey',
};
console.log(userOne == userTwo); // false

// Rule of thumb, we do not compare non-primitive data types.
// Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types,
// because they are being compared by reference instead of value.
// Two objects are only strictly equal if they refer to the same underlying object.

let numArr = [1, 2, 3];
let numberArr = numArr;
console.log(numArr == numberArr); // true

let userThree = {
  firstName: 'Ali',
  lastName: 'Yolalan',
  role: 'Software Development',
  country: 'Turkey',
};
let userFour = userThree;
console.log(userThree == userFour); // true

// If you have a hard time understanding the difference between primitive data types and non-primitive data types,
// you are not the only one. Calm down and just go to the next section and try to come back after some time.
// Now let us start the data types by number type.

// NUMBERS
// ------------------------------------------------------------------------------------------------------
// Numbers are integers and decimal values which can do all the arithmetic operations. Let's see some examples of Numbers.

// DECLARING NUMBER DATA TYPES
// ------------------------------------------------------------------------------------------------------
// let age = 35;
// const gravity = 9.81; // // we use const for non-changing values, gravitational constant in  m/s2
// let mass = 72; // mass in Kilogram
// const PI = 3.14; // pi a geometrical constant

// // More Examples
// const boilingPoint = 100; // temperature in oC, boiling point of water which is a constant
// const bodyTemp = 37; // oC average human body temperature, which is a constant

// console.log(age, gravity, mass, PI, boilingPoint, bodyTemp);

// MATH OBJECT
// ------------------------------------------------------------------------------------------------------
// In JavaScript the Math Object provides a lots of methods to work with numbers.
const PI = Math.PI;
console.log(PI); // 3.141592653589793

// Rounding to the closest number
// if above .5 up if less 0.5 down rounding
console.log(Math.round(PI)); // 3 to round values to the nearest number
console.log(Math.round(9.81)); // 10
console.log(Math.floor(PI)); // 3 rounding down
console.log(Math.ceil(PI)); // 4 rounding up
console.log(Math.min(-5, 3, 20, 4, 5, 10)); // -5, returns the minimum value
console.log(Math.max(-5, 3, 20, 4, 5, 10)); // 20, returns the maximum value
const randNum = Math.random(); // creates random number between 0 to 0.999999
console.log(randNum);

// // Let us  create random number between 0 to 10
const num = Math.floor(Math.random() * 11); // creates random number between 0 and 10
console.log(num);

//Absolute value
console.log(Math.abs(-10)); // 10

//Square root
console.log(Math.sqrt(100)); // 10

console.log(Math.sqrt(2)); // 1.4142135623730951

// Power
console.log(Math.pow(3, 2)); // 9

console.log(Math.E); // 2.718

// Logarithm
// Returns the natural logarithm with base E of x, Math.log(x)
console.log(Math.log(2)); // 0.6931471805599453
console.log(Math.log(10)); // 2.302585092994046

// Returns the natural logarithm of 2 and 10 respectively
console.log(Math.LN2); // 0.6931471805599453
console.log(Math.LN10); // 2.302585092994046

// Trigonometry
Math.sin(0);
Math.sin(60);

Math.cos(0);
Math.cos(60);

// RANDOM NUMBER GENERATOR
// ------------------------------------------------------------------------------------------------------
// The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...
let randomNum = Math.random(); // generates 0 to 0.999...

// Now, let us see how we can use random() method to generate a random number between 0 and 10:
let randomNumTwo = Math.random(); // generates 0 to 0.999
let numBtnZeroAndTen = randomNumTwo * 11;

console.log(numBtnZeroAndTen); // this gives: min 0 and max 10.99

let randomNumRoundToFloor = Math.floor(numBtnZeroAndTen);
console.log(randomNumRoundToFloor); // this gives between 0 and 10

// STRINGS
// ------------------------------------------------------------------------------------------------------
// Strings are texts, which are under single , double, back-tick quote. To declare a string,
// we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote.
// Let's see some examples of strings:
let space = ' '; // an empty space string
let firstName = 'Ali';
let lastName = 'Yolalan';
let country = 'Turkey';
let city = 'Sivas';
let language = 'JavaScript';
let job = 'Software Developer';
let quote = "The saying,'Seeing is Believing' is not correct in 2020.";
let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`;

// STRING CONCATENATION
// ------------------------------------------------------------------------------------------------------
// Connecting two or more strings together is called concatenation. Using the strings declared in the previous String section:
let fullName = firstName + space + lastName;
console.log(fullName);

// We can concatenate strings in different ways.
// Concatenating Using Addition Operator
// Concatenating using the addition operator is an old way. This way of concatenating is tedious and error-prone.
// It is good to know how to concatenate this way, but I strongly suggest to use the ES6 template strings (explained later on).
// Declaring different variables of different data types
let spaceTwo = ' ';
let firstNameTwo = 'Ali';
let lastNameTwo = 'Yolalan';
let countryTwo = 'Turkey';
let cityTwo = 'Sivas';
let languageTwo = 'JavaScript';
let jobTwo = 'Frontend Developer';
let age = 27;

let fullNameTwo = firstName + space + lastName;
let personInfoOne = fullName + '. I am ' + age + '. I live in ' + country; // ES5 string addition
console.log(personInfoOne);

// Long Literal Strings
// ------------------------------------------------------------------------------------------------------
// A string could be a single character or paragraph or a page.
// If the string length is too big it does not fit in one line.
// We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line. Example:
const paragraph =
  'My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\
I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \
Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \
In the end of 2019, I was thinking to expand my teaching and to reach \
to global audience and I started a Python challenge from November 20 - December 19.\
It was one of the most rewarding and inspiring experience.\
Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \
I hope you are enjoying too.';
console.log(paragraph);

// Escape Sequences in Strings
// ------------------------------------------------------------------------------------------------------
// In JavaScript and other programming languages \ followed by some characters is an escape sequence. Let's see the most common escape characters:
// \n: new line
// \t: Tab, means 8 spaces
// \\: Back slash
// \': Single quote (')
// \": Double quote (")

console.log(
  'I hope everyone is enjoying the 30 Days Of JavaScript challenge.\nDo you ?'
); // line break
console.log('Days\tTopics\tExercises');
console.log('Day 1\t3\t5');
console.log('Day 2\t3\t5');
console.log('Day 3\t3\t5');
console.log('Day 4\t3\t5');
console.log('This is a backslash  symbol (\\)'); // To write a backslash
console.log('In every programming language it starts with "Hello, World!"');
console.log("In every programming language it starts with 'Hello, World!'");
console.log("The saying 'Seeing is Believing' isn't correct in 2020");

// Template Literals (Template Strings)
// ------------------------------------------------------------------------------------------------------
// To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string.
// To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below.

// //Syntax
let expression = 'Yolalan';
let sentence = `String literal text ${expression}`;
console.log(sentence);

// Example: 1;
console.log(`The sum of 2 and 3 is 5`); // statically writing the data
let a = 2;
let b = 3;
console.log(`The sum of ${a} and ${b} is ${a + b}`); // injecting the data dynamically

// Example:2
let firstNameThree = 'Ali';
let lastNameThree = 'Yolalan';
let countryThree = 'Turkey';
let cityThree = 'Sivas';
let languageThree = 'JavaScript';
let jobThree = 'Frontend Developer';
let ageThree = 30;
let fullNameThree = firstNameThree + ' ' + lastNameThree;

let personInfoTwo = `I am ${firstNameThree}. I am ${ageThree}. I live in ${countryThree}.`; //ES6 - String interpolation method
let personInfoThree = `I am ${fullNameThree}. I live in ${cityThree}, ${countryThree}. I am a ${jobThree}. I teach ${languageThree}.`;
console.log(personInfoTwo);
console.log(personInfoThree);

// Using a string template or string interpolation method, we can add expressions,
// which could be a value, or some operations (comparison, arithmetic operations, ternary operation).
let numberOne = 2;
let numberTwo = 3;
console.log(`${a} is greater than ${b}: ${a > b}`);

// STRING METHODS
// ------------------------------------------------------------------------------------------------------
// Everything in JavaScript is an object. A string is a primitive data type that means we can not modify it once it is created.
// The string object has many string methods. There are different string methods that can help us to work with strings.
// 1. LENGHT: The string length method returns the number of characters in a string included empty space.
// Example:
let js = 'JavaScript';
console.log(js.length); // 10
let firstNameFour = 'Ali';
console.log(firstNameFour.length); // 3

// 2. Accessing characters in a string: We can access each character in a string using its index.
// In programming, counting starts from 0. The first index of the string is zero, and the last index is the length of the string minus one.
// Accessing characters in a string: We can access each character in a string using its index.
// In programming, counting starts from 0. The first index of the string is zero, and the last index is the length of the string minus one.
// Let us access different characters in 'JavaScript' string.
let string = 'JavaScript';
let firstLetter = string[0];
console.log(firstLetter); // J

let secondLetter = string[1];
let thirdLetter = string[2];
let lastLetter = string[9];
console.log(lastLetter); // t

let lastIndex = string.length - 1;
console.log(lastIndex);
console.log(string[lastIndex]);

// 3. toUpperCase(): this method changes the string to uppercase letters.
let stringTwo = 'JavaScript';
console.log(stringTwo.toUpperCase());

let firstNameFive = 'Ali';
console.log(firstNameFive.toUpperCase());

let countryFour = 'Germany';
console.log(countryFour.toUpperCase());

// 4. toLowerCase(): this method changes the string to lowercase letters.
let stringThree = 'JavaScript';
console.log(stringThree.toLowerCase()); // javascript

let firstNameSix = 'Ali';
console.log(firstNameSix.toLowerCase()); // ali

let countryFive = 'Germany';
console.log(countryFive.toLowerCase()); // Germany

// 5. substr(): It takes two arguments, the starting index and number of characters to slice.
let stringFour = 'JavaScript';
console.log(stringFour.substr(4, 6)); // Script

let countrySix = 'Turkey';
console.log(countrySix.substr(3, 3)); // key

// 6. substring(): It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index.
let stringFive = 'JavaScript';
console.log(stringFive.substring(0, 4)); // Java
console.log(stringFive.substring(4, 10)); // Script
console.log(stringFive.substring(4)); // Script

let countrySeven = 'Germany';
console.log(countrySeven.substring(0, 3)); // Ger
console.log(countrySeven.substring(3, 7)); // many
console.log(countrySeven.substring(3)); // many

// 7. split(): The split method splits a string at a specified place.
let stringSix = '30 Days Of JavaScript';
console.log(stringSix.split()); // Changes to an array -> ["30 Days Of JavaScript"]
console.log(stringSix.split(' ')); // Split to an array at space -> ["30", "Days", "Of", "JavaScript"]

let firstNameSeven = 'Behzat';
console.log(firstNameSeven.split()); // Change to an array - > ["Behzat"]
console.log(firstNameSeven.split('')); // // Split to an array at each letter ->  ["B", "e", "h", "z", "a", "t"]

let countries = 'Finland, Sweden, Norway, Denmark, and Iceland';
console.log(countries.split(',')); // split to any array at comma -> ["Finland", " Sweden", " Norway", " Denmark", " and Iceland"]
console.log(countries.split(', ')); //  ["Finland", "Sweden", "Norway", "Denmark", "and Iceland"]

// 8. trim(): Removes trailing space in the beginning or the end of a string.
let stringSeven = '   30 Days Of JavaScript   ';
console.log(stringSeven);
console.log(stringSeven.trim(' '));

let firstNameEight = ' Yaren ';
console.log(firstNameEight);
console.log(firstNameEight.trim()); // still removes spaces at the beginning and the end of the string

// 9. includes(): It takes a substring argument and it checks if substring argument exists in the string.
// includes() returns a boolean. If a substring exist in a string, it returns true, otherwise it returns false.
let stringEight = '30 Days Of JavaScript';
console.log(stringEight.includes('Days')); // true
console.log(stringEight.includes('days')); // false - it is case sensitive!
console.log(stringEight.includes('Script')); // true
console.log(stringEight.includes('script')); // false - it is case sensitive!
console.log(stringEight.includes('java')); // false - it is case sensitive!
console.log(stringEight.includes('Java')); // true

let countryEight = 'England';
console.log(countryEight.includes('eng')); // false
console.log(countryEight.includes('Eng')); // true
console.log(countryEight.includes('land')); // true
console.log(countryEight.includes('Land')); // false

// 10. replace(): takes as a parameter the old substring and a new substring.
// string.replace(oldsubstring, newsubstring)
let stringNine = '30 Days Of JavaScript';
console.log(stringNine.replace('JavaScript', 'Python')); // 30 Days Of Python
let countryNine = 'England';
console.log(countryNine.replace('Eng', 'Fin')); // Finland

// 11. charAt(): Takes index and it returns the value at that index
// string.charAt(index)
let stringTen = '30 Days Of JavaScript';
console.log(stringTen.charAt(0)); // 3

let lastIndexTwo = stringTen.length - 1;
console.log(stringTen.charAt(lastIndexTwo)); // t

// 12. charCodeAt(): Takes index and it returns char code (ASCII number) of the value at that index
// string.charCodeAt(index)
let stringEleven = '30 Days Of JavaScript';
console.log(stringEleven.charCodeAt(3)); // D ASCII number is 68

let lastIndexThree = stringEleven.length - 1;
console.log(stringEleven.charCodeAt(lastIndexThree)); // t ASCII is 116

// 13. indexOf(): Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1
// string.indexOf(substring)
let stringTwelve = '30 Days Of JavaScript';
console.log(stringTwelve.indexOf('D')); // 3
console.log(stringTwelve.indexOf('Days')); // 3
console.log(stringTwelve.indexOf('days')); // -1
console.log(stringTwelve.indexOf('a')); // 4
console.log(stringTwelve.indexOf('JavaScript')); // 11
console.log(stringTwelve.indexOf('Script')); //15
console.log(stringTwelve.indexOf('script')); // -1

// 14. lastIndexOf(): Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1
// string.lastIndexOf(substring)
let sentenceTwo =
  'I love JavaScript. If you do not love JavaScript what else can you love.';
console.log(sentenceTwo.lastIndexOf('love')); // 67
console.log(sentenceTwo.lastIndexOf('you')); // 63
console.log(sentenceTwo.lastIndexOf('JavaScript')); // 38

// 15. concat(): it takes many substrings and joins them.
// string.concat(substring, substring, substring)
let stringThirteen = '30';
console.log(stringThirteen.concat('Days', 'Of', 'JavaScript')); // 30DaysOfJavaScript

let countryTen = 'Fin';
console.log(countryTen.concat('land')); // Finland

// 16. startsWith: it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).
// string.startsWith(substring)
let sentenceThree = 'Love is the best to in this world';
console.log(sentenceThree.startsWith('Love')); // true
console.log(sentenceThree.startsWith('love')); // false
console.log(sentenceThree.startsWith('world')); // false

let countryEleven = 'Finland';
console.log(countryEleven.startsWith('Fin')); // true
console.log(countryEleven.startsWith('fin')); // false
console.log(countryEleven.startsWith('land')); //  false

// 17. endsWith: it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false).
// string.endsWith(substring)
let sentenceFour = 'Love is the most powerful feeling in the world';
console.log(sentenceFour.endsWith('world')); // true
console.log(sentenceFour.endsWith('love')); // false
console.log(sentenceFour.endsWith('in the world')); // true

let countryTwelve = 'Finland';
console.log(countryTwelve.endsWith('land')); // true
console.log(countryTwelve.endsWith('fin')); // false
console.log(countryTwelve.endsWith('Fin')); //  false

// 18. search: it takes a substring as an argument and it returns the index of the first match.
// The search value can be a string or a regular expression pattern.
// string.search(substring)
let sentenceFive =
  'I love JavaScript. If you do not love JavaScript what else can you love.';
console.log(sentenceFive.search('love')); // 2
console.log(sentenceFive.search(/javascript/gi)); // 7

// 19. match: it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null.
// Let us see how a regular expression pattern looks like. It starts with / sign and ends with / sign.
let stringFourteen = 'love';
let patternOne = /love/; // with out any flag
let patternTwo = /love/gi; // g-means to search in the whole text, i - case insensitive

// Match syntax
let stringFifteen =
  'I love JavaScript. If you do not love JavaScript what else can you love.';
console.log(stringFifteen.match('love'));
// ["love", index: 2, input: "I love JavaScript. If you do not love JavaScript what else can you love.", groups: undefined]
let pattern = /love/gi;
console.log(string.match(pattern)); // ["love", "love", "love"]

// Let us extract numbers from text using a regular expression. This is not the regular expression section,
// do not panic! We will cover regular expressions later on.

let txt =
  'In 2019, I ran 30 Days of Python. Now, in 2020 I am super exited to start this challenge';
let regEx = /\d+/;

// d with escape character means d not a normal d instead acts a digit
// + means one or more digit numbers,
// if there is g after that it means global, search everywhere.

console.log(txt.match(regEx)); // ["2", "0", "1", "9", "3", "0", "2", "0", "2", "0"]
console.log(txt.match(/\d+/g)); // ["2019", "30", "2020"]

// 20. repeat(): it takes a number as argument and it returns the repeated version of the string.
// string.repeat(n);
let stringSixteen = 'love';
console.log(stringSixteen.repeat(10)); // lovelovelovelovelovelovelovelovelovelove

// CHECKING DATA TYPES AND CASTING
// ------------------------------------------------------------------------------------------------------
// Checking Data Types
// To check the data type of a certain variable we use the typeof method.
// Example

// Different javascript data types
// Let's declare different data types

let firstNameNine = 'Ali'; // string
let lastNameNine = 'Yolalan'; // string
let countryThirteen = 'Turkey'; // string
let cityNine = 'Sivas'; // string
let ageNine = 27; // number, it is not my real age, do not worry about it
let jobNine; // undefined, because a value was not assigned

console.log(typeof 'Ali'); // string
console.log(typeof firstNameNine); // string
console.log(typeof 10); // number
console.log(typeof 3.14); // number
console.log(typeof true); // boolean
console.log(typeof false); // boolean
console.log(typeof NaN); // number
console.log(typeof jobNine); // undefined
console.log(typeof undefined); // undefined
console.log(typeof null); // object

// Changing Data Type (Casting)
// Casting: Converting one data type to another data type. We use parseInt(), parseFloat(), Number(), + sign, str() When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error.
// String to Int
// We can convert string number to a number. Any number inside a quote is a string number.
// An example of a string number: '10', '5', etc. We can convert string to number using the following methods:
// parseInt()
// Number()
// Plus sign(+)

let numThree = '10';
let numInt = parseInt(numThree);
console.log(numInt); // 10

let numFour = '10';
let numIntTwo = Number(numFour);
console.log(numIntTwo); // 10

let numFive = '10';
let numIntThree = +numFive;
console.log(numIntThree); // 10

// String to Float
// We can convert string float number to a float number. Any float number inside a quote is a string float number.
// An example of a string float number: '9.81', '3.14', '1.44', etc. We can convert string float to number using the following methods:
// parseFloat()
// Number()
// Plus sign(+)

let numSix = '9.81';
let numFloat = parseFloat(numSix);
console.log(numFloat); // 9.81

let numSeven = '9.81';
let numFloatTwo = Number(numSeven);
console.log(numFloatTwo); // 9.81

let numEight = '9.81';
let numFloatThree = +numEight;
console.log(numFloatThree); // 9.81

// Float to Int
// We can convert float numbers to integers. We use the following method to convert float to int:
// parseInt()

let numNine = 9.81;
let numIntFour = parseInt(numNine);
console.log(numIntFour); // 9

//  You are awesome. You have just completed day 2 challenges and you are two steps ahead on your way to greatness.
// Now do some exercises for your brain and for your muscle.
